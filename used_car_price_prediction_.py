# -*- coding: utf-8 -*-
"""Used Car Price Prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q1FI3LF-tjDVl2bAwNPzRdjo1kB3EH79
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('data.csv')

data.head()

data.drop(['Unnamed: 0'], axis=1, inplace=True)

data.shape

data.info()

data.isnull().sum()

data['New_Price'].fillna(inplace=True, value=data['Price'])

data.drop(['Price'], axis=1,inplace=True)

data.isnull().sum()

data['Seats'].value_counts()

data['Seats'] = data['Seats'].fillna(5)

data['Seats'].value_counts()

data.dropna(axis=0,subset=['New_Price'], how='any',inplace=True)

data.isnull().sum()

data.dropna(axis=0,subset=['Mileage'], how='any',inplace=True)

data['Engine'].value_counts()

data['Engine'] = data['Engine'].fillna(1197.0)

data.isnull().sum()

data['Power'].value_counts()

data['Power'] = data['Power'].fillna(74.0)

data.isnull().sum()

data.describe()

sns.distplot(data.New_Price)

data=data[data['New_Price']<80]

fig_ = data.hist(figsize=(25, 30), bins=50, color="darkcyan",
                         edgecolor="black", xlabelsize=8, ylabelsize=8)

var = 'Fuel_Type'
df = pd.concat([data['New_Price'], data[var]], axis=1)
f, ax = plt.subplots(figsize=(12, 8))
fig = sns.boxplot(x=var, y="New_Price", data=df)
fig.axis(ymin=0, ymax=165);

var = 'Owner_Type'
df2 = pd.concat([data['New_Price'], data[var]], axis=1)
f, ax = plt.subplots(figsize=(12, 8))
fig = sns.boxplot(x=var, y="New_Price", data=df2)
fig.axis(ymin=0, ymax=165);

numeric_cols = data.select_dtypes(include = np.number)
obj_cols= data.select_dtypes(include = np.object)

obj_cols.columns

name_dummy=pd.get_dummies(data['Name'],drop_first=True)
Location_dummies=pd.get_dummies(data['Location'],drop_first=True)

data=pd.concat([data, name_dummy,Location_dummies], axis=1)

data.drop(['Name','Location'], axis=1, inplace=True)

data.head()

data['Fuel_Type'].value_counts()

data.replace({'Diesel':1, 'Petrol':2, 'CNG':3, 'LPG':4},inplace=True)

data['Transmission'].value_counts()

data.replace({'Manual':0, 'Automatic':1},inplace=True)

data['Owner_Type'].value_counts()

data.replace({'First':1, 'Second':2, 'Third':3, 'Fourth & Above':4},inplace=True)

data.info()

data.columns

data.corr()

X = data.iloc[:, data.columns != 'New_Price']
Y = data.iloc[:, data.columns == 'New_Price']

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 100)

#Ridge regression
from sklearn.linear_model import Ridge
reg=Ridge(alpha=5.0, max_iter=200)
reg.fit(X_train,Y_train)
y_pred=reg.predict(X_test)
print('Accuracy score for training data:', reg.score(X_train,Y_train))
print('Accuracy score for testing data:', reg.score(X_test,Y_test))

from sklearn import metrics
from sklearn.metrics import mean_squared_error, mean_absolute_error

print("\t\tError Table")
print('Mean Absolute Error      : ', metrics.mean_absolute_error(Y_test, y_pred))
print('Mean Squared  Error      : ', metrics.mean_squared_error(Y_test, y_pred))
print('Root Mean Squared  Error : ', np.sqrt(metrics.mean_squared_error(Y_test, y_pred)))
print('R Squared Error          : ', metrics.r2_score(Y_test, y_pred))

